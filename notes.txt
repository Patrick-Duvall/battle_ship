Co-authored-by: Patrick <duvallp208@gmail.com>
Co-authored-by: Chris <davisc1014@gmail.com>

List of all user inputs

SETUP

p to play, q to quit. - if input == p or play, continue; input == q or quit puts quitmessage, exit.
all others loop.

board size
input validation is must be int, min 4 max 10

preset or custom ships
input validation - string == preset or custom

if preset, we use boardsize to determine how many ships - min is example; 2,3 and max is classic battleship
of 2,3,3,4,5 - we can hardcode based on boardsize, or try to write a statement to evaluate board?

if custom, we ask for number of ships (min 2, max boardsize - 2) -
then prompt for name of ship and length/health of each. looped to above input.
input validation - 1st arg cannot be the name of an existing ship.
2nd arg must be int, min 2 max boardsize - 1

end if

placement of ships. looped to number of ships
require coordinates in string - possible refactor if we want to go there but that's longterm.
input validation - We sting.split on space, pass array to valid_placement. All wrong input gets filtered.

TURN

choose coordinate to fire at
input validation - run string through valid_coordinate, invalid input is scrubbed.

END

List of all outputs -

SETUP

Welcome message, UI 8

prompt for board size, UI 11

prompt for preset or custom ships. UI 14

if preset, list ships. include ship name and length. Example:
The Cruiser is two units long and the Submarine is three units long.

if custom, prompt for how many ships - UI 20
Prompt for ship name and length, UI 21 - Repeat prompt looped to number of ships

end if

prompt for ship placement - UI 27 - Repeat prompt looped to number of ships

TURN

start of turn display both boards - computer board is on top, no CPU ships visible

prompt for user to fire at cpu - player will always go first. - UI 33

result of player shot - Example: Your shot on A4 was a miss.

result of cpu shot - Example: My shot on C1 was a miss.

loop to start of turn.

GAME END

result of game, example: You won! || I won!
prompt to play again - reuse UI 8

END

refactor with CPU class and runner - ETA 5 mins for runner and 30 for refactor.


if @lastshot != "H"
algo for shots - determine possible ships on each cell - store that in cell hash.

before shot run recalculate iterator. count ++ if ship can exist there.

first step - determine distance to edge. edge can be a shot.

1..boardsize
65..65+boardsize

per each coordinate - check if in bounds, iterate in all 4 directions. use ship placement code.
halt if cell checked has been fired_upon || if out of bounds.

toedge = number of cells to nearest edge.
probweight ++ if toedge >= ship.length - iterate through playerships.

totalweight = probweight + adjacent probweight.

fire at > totalweight.

else - loop until lastshot = "X"

search adjacent - highest weight. initial shot

subsequent shots - if ord of lasthit == ord of lastshot ++ num or -- if weighted.
if num of lasthit == num of lastshot ++ ord
